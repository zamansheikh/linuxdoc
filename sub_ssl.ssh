#!/bin/bash

# ─────────────────────────────────────────────────────────────────────────────
# Developer credit
echo -e "\nDeveloper: Zaman Sheikh"
echo -e "GitHub: github.com/zamansheikh\n"
# ─────────────────────────────────────────────────────────────────────────────

# 1. Ensure the script is run as root
if [ "$(id -u)" -ne 0 ]; then
  echo "This script must be run as root. Please use sudo."
  exit 1
fi

# 2. Check if running in an interactive shell
if [[ ! -t 0 ]]; then
    echo "This script must be run in an interactive shell."
    exit 1
fi

# 3. Prompt for subdomain
read -p "Enter your subdomain (e.g., admin.zamansheikh.com): " SUBDOMAIN

# Validate subdomain input (no www, not a main domain)
if [[ -z "$SUBDOMAIN" ]] || [[ "$SUBDOMAIN" =~ ^www\. ]] || ! [[ "$SUBDOMAIN" =~ ^[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$ ]]; then
  echo "Invalid input. Please provide a valid subdomain (e.g., admin.zamansheikh.com, not www or main domain)."
  exit 1
fi

# 4. Ensure Nginx is installed
if ! command -v nginx &> /dev/null; then
  echo "Nginx not found, installing..."
  apt update && apt install -y nginx
fi

# 5. Prompt for port
read -p "Enter the port number your app listens on (e.g., 3002): " PORT

if ! [[ "$PORT" =~ ^[0-9]+$ ]]; then
  echo "Invalid input. Please provide a numeric port."
  exit 1
fi

# ─────────────────────────────────────────────────────────────────────────────
# CLEANUP: Remove old configs for this subdomain
# ─────────────────────────────────────────────────────────────────────────────
if [ -f "/etc/nginx/sites-enabled/$SUBDOMAIN" ]; then
  echo "Removing old Nginx config for $SUBDOMAIN from sites-enabled..."
  rm -f "/etc/nginx/sites-enabled/$SUBDOMAIN"
fi

if [ -f "/etc/nginx/sites-available/$SUBDOMAIN" ]; then
  echo "Removing old Nginx config for $SUBDOMAIN from sites-available..."
  rm -f "/etc/nginx/sites-available/$SUBDOMAIN"
fi

# ─────────────────────────────────────────────────────────────────────────────
# Ensure directory exists for ACME challenges
# ─────────────────────────────────────────────────────────────────────────────
ACME_DIR="/var/www/certbot"
mkdir -p "$ACME_DIR"
chown -R www-data:www-data "$ACME_DIR"

# ─────────────────────────────────────────────────────────────────────────────
# Create temporary HTTP-only Nginx config with ACME challenge exception
# ─────────────────────────────────────────────────────────────────────────────
CONFIG_PATH="/etc/nginx/sites-available/$SUBDOMAIN"

cat > "$CONFIG_PATH" <<EOF
server {
    listen 80;
    server_name $SUBDOMAIN;

    # Serve ACME challenge files from a static directory
    location ^~ /.well-known/acme-challenge/ {
        root $ACME_DIR;
        default_type "text/plain";
        try_files \$uri =404;
    }

    # Proxy all other traffic to the backend
    location / {
        proxy_pass http://127.0.0.1:$PORT;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

ln -sf "$CONFIG_PATH" "/etc/nginx/sites-enabled/$SUBDOMAIN"

# 6. Test and reload Nginx with the new HTTP config
echo "Testing and reloading Nginx with HTTP-only config..."
nginx -t && systemctl reload nginx

# 7. Configure firewall (if using UFW)
if command -v ufw &> /dev/null; then
  echo "Configuring firewall with ufw..."
  ufw allow 80/tcp 2>/dev/null || true
  ufw allow 443/tcp 2>/dev/null || true
  ufw allow $PORT/tcp 2>/dev/null || true
  ufw reload 2>/dev/null || true
fi

# 8. Install Certbot if necessary
if ! command -v certbot &> /dev/null; then
  echo "Installing Certbot..."
  apt update && apt install -y certbot python3-certbot-nginx
fi

# 9. Request SSL certificate
echo "Requesting SSL certificate for $SUBDOMAIN..."
certbot certonly --nginx \
  -d "$SUBDOMAIN" \
  --non-interactive --agree-tos \
  -m "admin@$SUBDOMAIN" --redirect

# Verify certificate generation
if [ ! -f "/etc/letsencrypt/live/$SUBDOMAIN/fullchain.pem" ]; then
  echo "SSL certificate generation failed for $SUBDOMAIN. Please check domain DNS or logs."
  exit 1
fi

# 10. Overwrite config with HTTPS configuration
cat > "$CONFIG_PATH" <<EOF
# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name $SUBDOMAIN;
    location ^~ /.well-known/acme-challenge/ {
        root $ACME_DIR;
        default_type "text/plain";
        try_files \$uri =404;
    }
    location / {
        return 301 https://$SUBDOMAIN\$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name $SUBDOMAIN;

    ssl_certificate /etc/letsencrypt/live/$SUBDOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$SUBDOMAIN/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/$SUBDOMAIN/chain.pem;

    # Proxy to backend
    location / {
        proxy_pass http://127.0.0.1:$PORT;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

# 11. Test and reload Nginx with HTTPS config
echo "Enabling SSL in Nginx..."
nginx -t && systemctl reload nginx

# 12. Test Certbot auto-renewal
echo "Testing Certbot auto-renewal..."
certbot renew --dry-run

echo -e "\n✅ Setup complete! Your subdomain **https://$SUBDOMAIN** is now secured with SSL."
exit 0
