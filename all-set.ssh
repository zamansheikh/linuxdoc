#!/bin/bash

# Script metadata
echo "Developer: Zaman Sheikh"
echo "GitHub: github.com/zamansheikh"
echo ""

# Check for root privileges
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi

# Declare associative array for domains and ports
declare -A domain_ports

# Input collection
read -p "Enter your domain (e.g., example.com): " DOMAIN
read -p "Enter the port number for $DOMAIN: " PRIMARY_PORT
domain_ports["$DOMAIN"]=$PRIMARY_PORT

read -p "Do you want to include www.$DOMAIN? (y/n): " INCLUDE_WWW
if [[ "$INCLUDE_WWW" =~ ^[Yy]$ ]]; then
  read -p "Enter the port number for www.$DOMAIN (press Enter to use $PRIMARY_PORT): " WWW_PORT
  WWW_PORT=${WWW_PORT:-$PRIMARY_PORT}
  domain_ports["www.$DOMAIN"]=$WWW_PORT
fi

read -p "Enter additional subdomain prefixes (e.g., dash api), separated by space, or leave blank: " ADDITIONAL_SUBDOMAINS
for subdomain in $ADDITIONAL_SUBDOMAINS; do
  full_subdomain="$subdomain.$DOMAIN"
  read -p "Enter the port number for $full_subdomain: " SUB_PORT
  domain_ports["$full_subdomain"]=$SUB_PORT
done

read -p "Do you want to set up SSL with Let's Encrypt? (y/n): " SETUP_SSL

# Define paths
CONFIG_PATH="/etc/nginx/sites-available/$DOMAIN"
LINK_PATH="/etc/nginx/sites-enabled/$DOMAIN"
ACME_DIR="/var/www/letsencrypt"

# Cleanup old configurations
echo "Removing old Nginx config for $DOMAIN from sites-enabled..."
rm -f "$LINK_PATH"
echo "Removing old Nginx config for $DOMAIN from sites-available..."
rm -f "$CONFIG_PATH"

# Create ACME challenge directory
mkdir -p "$ACME_DIR"

# Generate initial HTTP-only Nginx configuration
echo "Generating HTTP-only Nginx configuration..."
for domain in "${!domain_ports[@]}"; do
  port=${domain_ports[$domain]}
  cat <<EOF >> "$CONFIG_PATH"
server {
    listen 80;
    server_name $domain;
    location ^~ /.well-known/acme-challenge/ {
        root $ACME_DIR;
        default_type "text/plain";
        try_files \$uri =404;
    }
    location / {
        proxy_pass http://127.0.0.1:$port;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
done

# Enable configuration
ln -sf "$CONFIG_PATH" "$LINK_PATH"

# Test and reload Nginx
echo "Testing and reloading Nginx with HTTP-only config..."
nginx -t && systemctl reload nginx

# Configure firewall
echo "Configuring firewall with ufw..."
ufw allow 80/tcp
ufw allow 443/tcp

if [[ "$SETUP_SSL" =~ ^[Yy]$ ]]; then
  # Install Certbot if not present
  if ! command -v certbot &> /dev/null; then
    echo "Installing Certbot..."
    apt update
    apt install -y certbot python3-certbot-nginx
  fi

  # Request SSL certificate
  echo "Requesting SSL certificate for ${!domain_ports[@]}..."
  certbot certonly --nginx --cert-name "$DOMAIN" $(for d in "${!domain_ports[@]}"; do echo -d "$d"; done) --non-interactive --agree-tos -m "admin@$DOMAIN"

  # Check if Certbot succeeded
  if [ $? -eq 0 ]; then
    # Overwrite Nginx config with SSL
    echo "Enabling SSL in Nginx..."
    > "$CONFIG_PATH" # Clear the file
    for domain in "${!domain_ports[@]}"; do
      port=${domain_ports[$domain]}
      cat <<EOF >> "$CONFIG_PATH"
server {
    listen 80;
    server_name $domain;
    location ^~ /.well-known/acme-challenge/ {
        root $ACME_DIR;
        default_type "text/plain";
        try_files \$uri =404;
    }
    location / {
        return 301 https://$domain\$request_uri;
    }
}
server {
    listen 443 ssl;
    server_name $domain;
    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/$DOMAIN/chain.pem;
    location / {
        proxy_pass http://127.0.0.1:$port;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
    done

    # Test and reload Nginx
    nginx -t && systemctl reload nginx

    # Test Certbot renewal
    echo "Testing Certbot auto-renewal..."
    certbot renew --dry-run
  else
    echo "SSL setup failed. Continuing with HTTP-only configuration."
  fi
fi

# Final message
echo -e "\nâœ… Setup complete! The following domains are now configured:"
for domain in "${!domain_ports[@]}"; do
  if [[ "$SETUP_SSL" =~ ^[Yy]$ ]] && [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
    echo " - https://$domain"
  else
    echo " - http://$domain"
  fi
done
echo "Note: If you see warnings about conflicting server names, please remove any other Nginx config files defining the same domains."
echo "Inbox-Buddy: Your AI Email Assistant"
echo "Streamline your email with Inbox-Buddy, the AI assistant that organizes your inbox and enhances productivity."
